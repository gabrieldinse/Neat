[1mdiff --git a/Neat/src/Neat/Renderer/Buffer.cpp b/Neat/src/Neat/Renderer/Buffer.cpp[m
[1mindex 9d66490..8a8a249 100644[m
[1m--- a/Neat/src/Neat/Renderer/Buffer.cpp[m
[1m+++ b/Neat/src/Neat/Renderer/Buffer.cpp[m
[36m@@ -63,7 +63,7 @@[m [mnamespace Neat[m
 [m
    void VertexBuffer::setData(const void* data, IntLong size)[m
    {[m
[31m-      glBindBuffer(GL_ARRAY_BUFFER, this->rendererID);[m
[32m+[m[32m      this->bind();[m
       glBufferSubData(GL_ARRAY_BUFFER, 0, size, data);[m
    }[m
 [m
[1mdiff --git a/Neat/src/Neat/Renderer/Renderer2D.cpp b/Neat/src/Neat/Renderer/Renderer2D.cpp[m
[1mindex 8a0bf92..5d62f1e 100644[m
[1m--- a/Neat/src/Neat/Renderer/Renderer2D.cpp[m
[1m+++ b/Neat/src/Neat/Renderer/Renderer2D.cpp[m
[36m@@ -16,9 +16,7 @@[m [mnamespace Neat[m
 [m
       data.quadVertexArray = std::make_shared<VertexArray>();[m
       data.quadVertexBuffer = std::make_shared<VertexBuffer>([m
[31m-         Renderer2DData::maxVertices * (UInt)sizeof(QuadVertex));[m
[31m-[m
[31m-      auto quadIndexes = std::make_unique<UInt[]>(Renderer2DData::maxIndexes);[m
[32m+[m[32m         QuadVextexDataBuffer::maxVertices * (UInt)sizeof(QuadVertexData));[m
 [m
       data.quadVertexBuffer->setLayout({[m
          { ShaderDataType::Vec3, "a_position" },[m
[36m@@ -27,14 +25,12 @@[m [mnamespace Neat[m
          { ShaderDataType::Float, "a_textureIndex"},[m
          { ShaderDataType::Float, "a_tilingFactor"}[m
          });[m
[31m-[m
       data.quadVertexArray->addVertexBuffer(data.quadVertexBuffer);[m
 [m
[31m-      data.quadVertexBufferBase =[m
[31m-         std::make_unique<QuadVertex[]>(Renderer2DData::maxVertices);[m
[31m-[m
[32m+[m[32m      auto quadIndexes = std::make_unique<UInt[]>([m
[32m+[m[32m         QuadVextexDataBuffer::maxIndexes);[m
       UInt offset = 0;[m
[31m-      for (SizeType i = 0; i < Renderer2DData::maxIndexes; i += 6, offset += 4)[m
[32m+[m[32m      for (SizeType i = 0; i < QuadVextexDataBuffer::maxIndexes; i += 6, offset += 4)[m
       {[m
          quadIndexes[i + 0] = offset + 0;[m
          quadIndexes[i + 1] = offset + 1;[m
[36m@@ -46,7 +42,7 @@[m [mnamespace Neat[m
       }[m
 [m
       auto squareIB = std::make_shared<IndexBuffer>([m
[31m-         quadIndexes.get(), Renderer2DData::maxIndexes);[m
[32m+[m[32m         quadIndexes.get(), QuadVextexDataBuffer::maxIndexes);[m
 [m
       data.quadVertexArray->setIndexBuffer(squareIB);[m
 [m
[36m@@ -63,11 +59,6 @@[m [mnamespace Neat[m
       data.textureShader->setTextures(samplers, sizeof(samplers));[m
 [m
       data.textureSlots[0] = data.whiteTexture;[m
[31m-[m
[31m-      data.quadVertexPositions[0] = { -0.5f, -0.5f, 0.0f, 1.0f };[m
[31m-      data.quadVertexPositions[1] = { 0.5f, -0.5f, 0.0f, 1.0f };[m
[31m-      data.quadVertexPositions[2] = { 0.5f,  0.5f, 0.0f, 1.0f };[m
[31m-      data.quadVertexPositions[3] = { -0.5f,  0.5f, 0.0f, 1.0f };[m
    }[m
 [m
    void Renderer2D::shutdown()[m
[36m@@ -94,27 +85,20 @@[m [mnamespace Neat[m
 [m
    void Renderer2D::startNewBatch()[m
    {[m
[31m-      data.quadIndexCount = 0;[m
[31m-      data.quadVertexBufferPtr = data.quadVertexBufferBase.get();[m
[32m+[m[32m      data.quadVextexDataBuffer.reset();[m
       data.textureSlotIndex = 1;[m
    }[m
 [m
    void Renderer2D::draw()[m
    {[m
[31m-      IntLong data_size_in_bytes =[m
[31m-         (IntLong)([m
[31m-            (Byte*)(data.quadVertexBufferPtr) -[m
[31m-            (Byte*)(data.quadVertexBufferBase.get())[m
[31m-            );[m
[31m-[m
[31m-      data.quadVertexBuffer->setData([m
[31m-         data.quadVertexBufferBase.get(), data_size_in_bytes);[m
[32m+[m[32m      data.quadVertexBuffer->setData(data.quadVextexDataBuffer.data.get(),[m
[32m+[m[32m         data.quadVextexDataBuffer.getDataSize());[m
 [m
       UInt index = 0;[m
       for (SizeType i = 0; i < data.textureSlotIndex; ++i, ++index)[m
          data.textureSlots[i]->bind(index);[m
 [m
[31m-      RenderCommand::drawIndexed